///////////////////////////////////////////////////////////////////////////////////////////////////
//  io.cpp
//    Manage system memory/disk objects
///////////////////////////////////////////////////////////////////////////////////////////////////
#include "io.h"
#include <cassert>
#include "utils.h"

////////////////////////////////////////////////////////////////////////////////////////////////////
// IOBuffer::IOBuffer
//    Constructor
////////////////////////////////////////////////////////////////////////////////////////////////////
IOBuffer::IOBuffer(DXGI_FORMAT format_, std::size_t size_)
    : format(format_), byteStride(GetByteStrideFromFormat(format_)), size(size_)
{
    assert(!(size_ % byteStride));

    if (format_ == DXGI_FORMAT_UNKNOWN) throw std::exception("Creating an unkown format buffer");

    // Allocate memory
    if (!(pData = std::make_unique<std::uint8_t[]>(size)))
    {
        throw std::exception("Can't allocate buffer");
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////
// IOBuffer::IOBuffer
//    Constructor
////////////////////////////////////////////////////////////////////////////////////////////////////
IOBuffer::IOBuffer(std::size_t byteStride_, std::size_t size_)
    : format(DXGI_FORMAT_UNKNOWN), byteStride(byteStride_), size(size_)
{
    assert(!(size % byteStride));

    // Allocate memory
    if (!(pData = std::make_unique<std::uint8_t[]>(size)))
    {
        throw std::exception("Can't allocate buffer");
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////
// IOBuffer::IOBuffer
//    Move Constructor
////////////////////////////////////////////////////////////////////////////////////////////////////
IOBuffer::IOBuffer(IOBuffer&& source)
{
    format       = source.format;
    byteStride   = source.byteStride;
    size         = source.size;
    pData        = std::move(source.pData);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
// IOBuffer::~IOBuffer
//    Desstructor
////////////////////////////////////////////////////////////////////////////////////////////////////
IOBuffer::~IOBuffer()
{
}