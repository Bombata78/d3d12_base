///////////////////////////////////////////////////////////////////////////////////////////////////
//  io.h
//    Manage system memory/disk objects
///////////////////////////////////////////////////////////////////////////////////////////////////
#pragma once
#include <dxgiformat.h>
#include <cstddef>
#include <memory>

class IOBuffer
{
public:
    IOBuffer(IOBuffer&& source);
    IOBuffer(DXGI_FORMAT format_, std::size_t size_);
    IOBuffer(std::size_t byteStride_, std::size_t size_);
    IOBuffer()                           = delete;
    IOBuffer(const IOBuffer&)            = delete;
    IOBuffer& operator=(const IOBuffer&) = delete;
    IOBuffer& operator=(IOBuffer&&)      = delete;
    ~IOBuffer();

    inline void*        getData();
    inline const void*  getData()       const;
    inline DXGI_FORMAT  getFormat()     const;
    inline std::size_t  getSize()       const;
    inline std::size_t  getByteStride() const;

private:
    DXGI_FORMAT                     format;
    std::size_t                     byteStride;
    std::size_t                     size;
    std::unique_ptr<std::uint8_t[]> pData;
};

////////////////////////////////////////////////////////////////////////////////////////////////////
// IOBuffer::getData
//    Return buffer content
////////////////////////////////////////////////////////////////////////////////////////////////////
void* IOBuffer::getData()
{
    return pData.get();
}

////////////////////////////////////////////////////////////////////////////////////////////////////
// IOBuffer::getData
//    Return buffer content
////////////////////////////////////////////////////////////////////////////////////////////////////
const void* IOBuffer::getData() const
{
    return pData.get();
}

////////////////////////////////////////////////////////////////////////////////////////////////////
// IOBuffer::getFormat
//    Return buffer format
////////////////////////////////////////////////////////////////////////////////////////////////////
DXGI_FORMAT IOBuffer::getFormat() const
{
    return format;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
// IOBuffer::getSize
//    Return buffer size
////////////////////////////////////////////////////////////////////////////////////////////////////
std::size_t IOBuffer::getSize() const
{
    return size;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
// IOBuffer::getByteStride
//    Return buffer byte stride
////////////////////////////////////////////////////////////////////////////////////////////////////
std::size_t IOBuffer::getByteStride() const
{
    return byteStride;
}