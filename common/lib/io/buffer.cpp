///////////////////////////////////////////////////////////////////////////////////////////////////
//  buffer.cpp
//    Manage buffer to system memory
///////////////////////////////////////////////////////////////////////////////////////////////////
#include <cassert>
#include "io/buffer.h"
#include "core/utils.h"

namespace io
{
///////////////////////////////////////////////////////////////////////////////////////////////////
//  buffer::buffer
//    Constructor
///////////////////////////////////////////////////////////////////////////////////////////////////
buffer::buffer(::format format__, std::size_t size__)
    : pData_(std::make_unique<std::uint8_t[]>(size__)), format_(format__), size_(size__), stride_(get_stride_from_format(format__))
{
    assert(size_ && stride_);
    assert(pData_.get());
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//  buffer::buffer
//    Constructor
///////////////////////////////////////////////////////////////////////////////////////////////////
buffer::buffer(std::unique_ptr<std::uint8_t[]> pData__, ::format format__, std::size_t size__)
    : pData_(std::move(pData__)), format_(format__), size_(size__), stride_(get_stride_from_format(format__))
{
    assert(size_ && stride_);
    assert(pData_.get());
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//  buffer::buffer
//    Constructor
///////////////////////////////////////////////////////////////////////////////////////////////////
buffer::buffer(std::size_t stride__, std::size_t size__)
    : pData_(std::make_unique<std::uint8_t[]>(size__)), format_(::format::unknown), size_(size__), stride_(stride__)
{
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//  buffer::buffer
//    Move constructor
///////////////////////////////////////////////////////////////////////////////////////////////////
buffer::buffer(buffer&& rhs)
    : pData_(std::move(rhs.pData_)), format_(rhs.format_), size_(rhs.size_), stride_(rhs.stride_)
{
}

};